image: docker:19

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://localhost:2375

services:
  - docker:19-dind

test-to-sharehost:
  stage: build
  variables:
    URL_ENCODE: >
      urlencode() {
        old_lc_collate=$LC_COLLATE
        LC_COLLATE=C

        local length="${#1}"
        for (( i = 0; i < length; i++ )); do
            local c="${1:$i:1}"
            case $c in
                [a-zA-Z0-9.~_-]) printf '%s' "$c" ;;
                *) printf '%%%02X' "'$c" ;;
            esac
        done

        LC_COLLATE=$old_lc_collate
      }
      urlencode $@
    DEPLOY_AUTH: "Authorization: cpanel $CPANEL_USER:$CPANEL_TOKEN"
    DEPLOY_UPLOAD_COMMAND: |
      curl --location $DEPLOY_UPLOAD_URL --header $DEPLOY_AUTH --form '=@"/usr/output/dist-ci.zip"'
  except:
    - tags
  before_script:
    # Login to Gitlab registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY_IMAGE
    - IMAGE_TAG="$(echo "$CI_BUILD_REF_NAME" | tr '/' '-')"
  script:
    - ENCODE_SCRIPT=$URL_ENCODE
    - echo $ENCODE_SCRIPT > urlencode.sh
    - chmod +x ./urlencode.sh
    - DEPLOY_PRE_PATH=/public/$DEPLOY_DOMAIN
    - DEPLOY_PATH=$(./urlencode.sh $DEPLOY_PATH)
    - DEPLOY_UPLOAD_URL="$CPANEL_HOST/json-api/cpanel?cpanel_jsonapi_module=Fileman&cpanel_jsonapi_apiversion=2&cpanel_jsonapi_func=uploadfiles&dir=$DEPLOY_PATH&overwrite=1"
    - docker pull $CI_REGISTRY_IMAGE:main
    # - docker pull $CI_REGISTRY_IMAGE:$IMAGE_TAG
    - mkdir -p $PWD/output
    - docker run --rm -v $PWD/output:/usr/output $CI_REGISTRY_IMAGE:$IMAGE_TAG cp ../output/dist.zip /usr/output/dist-ci.zip
    - docker run --rm -v $PWD/output:/usr/output -w /usr/output alpine/curl curl $DEPLOY_UPLOAD_COMMAND
# build:
#   stage: build
#   only:
#     - main
#   artifacts:
#     paths:
#       - Dockerfile
#   before_script:
#     # $CI_JOB_TOKEN is variable automatically added by Gitlab: see https://docs.gitlab.com/ee/ci/variables/predefined_variables.html#variables-reference
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY_IMAGE
#     - IMAGE_TAG="$(echo "$CI_BUILD_REF_NAME" | tr '/' '-')"
#   script:
#     - docker pull $CI_REGISTRY_IMAGE || true # Allows us to use --cache-from
#     - docker build --rm --cache-from $CI_REGISTRY_IMAGE -t $CI_REGISTRY_IMAGE:$IMAGE_TAG .
#     - docbker push $CI_REGISTRY_IMAGE:$IMAGE_TAG

# push-to-sharehost:
#   stage: deploy
#   variables:
#     DEPLOY_CURL_COMMAND: |
#       curl --location "$CPANEL_HOST/json-api/cpanel?cpanel_jsonapi_module=Fileman&cpanel_jsonapi_apiversion=2&cpanel_jsonapi_func=uploadfiles&dir=/public/$DEPLOY_DOMAIN&overwrite=1" \
#       --header "Authorization: cpanel $CPANEL_USER:$CPANEL_TOKEN" \
#       --form '=@"./output/dist-ci.zip"'
#   when: manual
#   except:
#     - tags
#   before_script:
#     # Login to Gitlab registry
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY_IMAGE
#     - IMAGE_TAG="$(echo "$CI_BUILD_REF_NAME" | tr '/' '-')"
#   script:
#     - docker pull $CI_REGISTRY_IMAGE:main
#     # - docker pull $CI_REGISTRY_IMAGE:$IMAGE_TAG
#     - mkdir -p $PWD/output
#     - docker run --rm $PWD/output:/usr/output $CI_REGISTRY_IMAGE:$IMAGE_TAG cp ../output/dist.zip /usr/output/dist-ci.zip
#     - eval $DEPLOY_CURL_COMMAND
